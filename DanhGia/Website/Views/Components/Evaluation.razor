@using System.Net.Http
@using System.Diagnostics
@inject IJSRuntime JS

<h3>Đánh giá hiệu năng giữa JavaScript và C Sharp</h3>
<br />
<div class="container">
    <div class="d-flex flex-column">
        <div class="p-3">
            <h5>Dữ liệu</h5>
            <select class="custom-select custom-select-lg">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn Dữ Liệu
                </option>
                <option value="1">Chữ</option>
                <option value="2">Số</option>
            </select>
        </div>
        @*End Dữ liệu*@
        <div class="p-3">
            <h5>Thuật toán</h5>
            <select class="custom-select custom-select-lg">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn thuật toán
                </option>
                <option value="1">Bubble Sort</option>
                <option value="2">Quick Sort</option>
            </select>
        </div>
        @* End Thuật toán*@
        <div class="p-3">
            <button type="button" class="btn btn-success btn-lg" @onclick="Chay">Nút C#</button>
            <button type="button" class="btn btn-success btn-lg" onclick="Chay()">Nút JS</button>
        </div>

    </div>
</div>


@code {
    private async Task Chay()
    {
        HttpClient client = new HttpClient();
        var response = await client.GetAsync("https://localhost:44328/api/DocFile/dulieuso/data_s.txt");
        string content = await response.Content.ReadAsStringAsync();

        String[] arr = content.Split("\n");
        long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));
        //long time = ExecutionTime(() => bubbleSort_so(arr_so));
        long time = ExecutionTime(() => selection_sort(arr_so));
        long mang = ExecutionTime(() => printArray(arr_so));
        await JS.InvokeVoidAsync("ShowLog", mang + " ");
        await JS.InvokeVoidAsync("ShowLog", "Thời gian chay C# là: " + time + " ms");

    }

    //private static void bubbleSort(string[] arr)
    //{
    //    string temp;
    //    // Sorting strings using bubble sort
    //    for (int i = 0; i < arr.Length; i++)
    //    {
    //        for (int j = 0; j < (arr.Length - i - 1); j++)
    //        {
    //            if (arr[j].CompareTo(arr[j + 1]) > 0)
    //            {
    //                temp = arr[j];
    //                arr[j] = arr[i];
    //                arr[i] = temp;
    //            }
    //        }
    //    }
    //}
    private static void bubbleSort_so(long[] arr)
    {
        long temp;
        // Sorting strings using bubble sort
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = 0; j < (arr.Length - i - 1); j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    temp = arr[j];
                    arr[j] = arr[i];
                    arr[i] = temp;
                }
            }
        }
    }
    //Selection Sort
    private static void selection_sort(long[] arr)
    {

        // One by one move boundary of unsorted subarray
        for (int i = 0; i < arr.Length - 1; i++)
        {
            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i + 1; j < arr.Length; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;

            // Swap the found minimum element with the first
            // element
            long temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }

    }
    static void printArray(long[] arr)
    {
        for (int i = 0; i < arr.Length; ++i)
        {

            // Console.Write(arr[i] + " ");
        }
    }

    //end Selection Sort

    private long ExecutionTime(Action function)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        function();
        stopwatch.Stop();
        return stopwatch.ElapsedMilliseconds;
    }
}
