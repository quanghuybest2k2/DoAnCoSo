@using System.Net.Http
@using System.Diagnostics
@inject IJSRuntime JS

<h3>Đánh giá hiệu năng giữa JavaScript và C Sharp</h3>
<br />
<div class="container">
    <div class="d-flex flex-column">
        <div class="p-3">
            <h5>Dữ liệu</h5>
            <select class="custom-select custom-select-lg" @bind="DuLieu" id="dulieu">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn Dữ liệu
                </option>
                <option value="1">Chuoi 1</option>
                <option value="2">Chuoi 2</option>
                <option value="3">Số 1</option>
                <option value="4">Số 2</option>
                <option value="5">Số 3</option>
            </select>
        </div>
        @*End Dữ liệu*@
        <div class="p-3">
            <h5>Thuật toán</h5>
            <select class="custom-select custom-select-lg" @bind="ThuatToan" id="thuattoan">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn thuật toán
                </option>
                <option value="1">Bubble Sort</option>
                <option value="2">Selection Sort</option>
                <option value="3">Insertion Sort</option>
            </select>
        </div>
        @* End Thuật toán*@
        <div class="p-3">
            <button type="button" class="btn btn-success btn-lg" @onclick="Chay">Nút C#</button>
            <button type="button" class="btn btn-success btn-lg" onclick="Chay()">Nút JS</button>
        </div>
        <div class="spinner-border" role="status" style="display:none;" id="spinner">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>


@code {
    // khai  bao kieu du lieu
    int DuLieu;
    int ThuatToan;

    private async Task Chay()
    {
        HttpClient client = new HttpClient();
        var response = await client.GetAsync("https://localhost:44328/api/DocFile/dulieuso/data_s.txt");
        string content = await response.Content.ReadAsStringAsync();

        String[] arr = content.Split("\n");
        long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));
        if (ThuatToan == 1)
        {
            long time_bbsort = ExecutionTime(() => bubbleSort_so(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Bubble Sort C# là: " + time_bbsort + " ms");
        }
        if (ThuatToan == 2)
        {
            long time_slsort = ExecutionTime(() => selection_sort(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Selection Sort C# là: " + time_slsort + " ms");
        }
        if (ThuatToan == 3)
        {
            long time_InsertionSort = ExecutionTime(() => InsertionSort(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Insertion Sort C# là: " + time_InsertionSort + " ms");
        }

    }

    private static void bubbleSort_chuoi(string[] arr)
    {
        string temp;
        // Sorting strings using bubble sort
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = 0; j < (arr.Length - i - 1); j++)
            {
                if (SoSanh(arr[j], arr[j + 1]) > 0)
                {
                    temp = arr[j];
                    arr[j] = arr[i];
                    arr[i] = temp;
                }
            }
        }
    }
    private static void bubbleSort_so(long[] arr)
    {
        long temp;
        // Sorting strings using bubble sort
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = 0; j < (arr.Length - i - 1); j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    temp = arr[j];
                    arr[j] = arr[i];
                    arr[i] = temp;
                }
            }
        }
    }
    //Selection Sort
    private static void selection_sort(long[] arr)
    {

        // One by one move boundary of unsorted subarray
        for (int i = 0; i < arr.Length - 1; i++)
        {
            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i + 1; j < arr.Length; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;

            // Swap the found minimum element with the first
            // element
            long temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }
    //end Selection Sort
    //Insertion Sort
    void InsertionSort(long[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            long key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    // End Insertion Sort

    private long ExecutionTime(Action function)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        function();
        stopwatch.Stop();
        return stopwatch.ElapsedMilliseconds;
    }


    private static int SoSanh(string a, string b)
    {
        return a.ToString().ToLower().CompareTo(b.ToString().ToLower());
    }
}
