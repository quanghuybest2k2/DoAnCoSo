@using System.Net.Http
@using System.Diagnostics
@inject IJSRuntime JS

<h3>Đánh giá hiệu năng giữa JavaScript và C Sharp</h3>
<br />
<div class="container">
    <div class="d-flex flex-column">
        <div class="p-3">
            <h5>Dữ liệu</h5>
            <select class="custom-select custom-select-lg" @bind="DuLieu" id="dulieu">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn Dữ liệu
                </option>
                <option value="1">Dữ liệu chuỗi 331KB</option>
                <option value="2">Dữ liệu chuỗi 661KB</option>
                <option value="3">Dữ liệu chuỗi 1.7MB</option>
                <option value="4">Dữ liệu số size S</option>
                <option value="5">Dữ liệu số size M</option>
                <option value="6">Dữ liệu số size XL</option>
            </select>
        </div>
        @*End Dữ liệu*@
        <div class="p-3">
            <h5>Thuật toán</h5>
            <select class="custom-select custom-select-lg" @bind="ThuatToan" id="thuattoan">
                <option value="0"
                        selected="selected"
                        disabled="disabled"
                        hidden="hidden">
                    Chọn thuật toán
                </option>
                <option value="1">Bubble Sort Chuỗi</option>
                <option value="2">Selection Sort Chuỗi</option>
                <option value="3">Insertion Sort Chuỗi</option>
                <option value="4">Bubble Sort Số</option>
                <option value="5">Selection Sort Số</option>
                <option value="6">Insertion Sort Sô</option>
            </select>
        </div>
        @* End Thuật toán*@
        <div class="p-3">
            <button type="button" class="btn btn-success btn-lg" @onclick="Chay">Nút C#</button>
            <button type="button" class="btn btn-success btn-lg" onclick="Chay()">Nút JS</button>
        </div>
        <div class="spinner-border" role="status" style="display:none;" id="spinner">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>


@code {
    // khai  bao kieu du lieu
    int DuLieu;
    int ThuatToan;


    private async Task Chay()
    {
        string url = null;
        if (DuLieu == 1)
        {
            url = "dulieuchuoi/mangchuoi331kb.txt";
        }
        if (DuLieu == 2)
        {
            url = "dulieuchuoi/mangchuoi661kb.txt";
        }
        if (DuLieu == 3)
        {
            url = "dulieuchuoi/mangchuoi1p766.txt";
        }
        // number
        if (DuLieu == 4)
        {
            url = "dulieuso/data_s.txt";
        }
        if (DuLieu == 5)
        {
            url = "dulieuso/data_m.txt";
        }
        if (DuLieu == 6)
        {
            url = "dulieuso/data_xl.txt";
        }

        HttpClient client = new HttpClient();
        var response = await client.GetAsync("https://localhost:44328/api/DocFile/" + url);
        string content = await response.Content.ReadAsStringAsync();

        String[] arr_chuoi = content.Split("\r\n");
        String[] arr = content.Split("\n");
        //long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));
        if (ThuatToan == 1)
        {
            long time_bbsort_chuoi = ExecutionTime(() => bubbleSort_chuoi(arr_chuoi));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Bubble Sort chuỗi C# là: " + time_bbsort_chuoi + " ms");
        }
        if (ThuatToan == 2)
        {
            long time_bbsort = ExecutionTime(() => bubbleSort_chuoi(arr_chuoi));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Bubble Sort chuỗi C# là: " + time_bbsort + " ms");
        }
        if (ThuatToan == 3)
        {
            long time_bbsort = ExecutionTime(() => bubbleSort_chuoi(arr_chuoi));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Bubble Sort chuỗi C# là: " + time_bbsort + " ms");
        }
        if (ThuatToan == 4)
        {
            long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));

            long time_bbsort = ExecutionTime(() => bubbleSort_so(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Bubble Sort Số C# là: " + time_bbsort + " ms");
        }
        if (ThuatToan == 5)
        {
            long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));

            long time_slsort = ExecutionTime(() => selection_sort(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Selection Sort Số C# là: " + time_slsort + " ms");
        }
        if (ThuatToan == 6)
        {
            long[] arr_so = Array.ConvertAll(arr, s => long.Parse(s));

            long time_InsertionSort = ExecutionTime(() => InsertionSort(arr_so));
            await JS.InvokeVoidAsync("ShowLog", "Thời gian chạy thuật toán Insertion Sort Số C# là: " + time_InsertionSort + " ms");
        }
    }
    // ================================== Thuật toán chuỗi ====================================
    private static void bubbleSort_chuoi(string[] arr)
    {
        // Sorting strings using bubble sort
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = 0; j < (arr.Length - i - 1); j++)
            {
                if (SoSanh(arr[j], arr[j + 1]) > 0)
                {
                    string temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    //Selection Sort string
    private static void selection_sort_chuoi(string[] arr)
    {
        string temp;
        // One by one move boundary of unsorted subarray
        for (int i = 0; i < arr.Length - 1; i++)
        {
            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (SoSanh(arr[j], arr[min_idx]) < 0)
                {
                    min_idx = j;
                }
            }
            // Swap the found minimum element with the first
            temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }
    //end Selection Sort
    //Insertion Sort
    private static void InsertionSort_chuoi(string[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            string key = arr[i];
            int j = i - 1;

            while (j >= 0 && SoSanh(arr[j], key) > 0) //j >= 0 && sosanh(arr[j], key) > 0
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }
    // End Insertion Sort
    // ================================== Thuật toán số ======================================
    private static void bubbleSort_so(long[] arr)
    {
        // Sorting strings using bubble sort
        for (int i = 0; i < arr.Length; i++)
        {
            // Last i elements are already in place
            for (var j = 0; j < (arr.Length - i - 1); j++)
            {
                if (arr[j] > arr[j + 1])
                {

                    // If the condition is true then swap them
                    long temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    //Selection Sort
    private static void selection_sort(long[] arr)
    {
        for (int i = 0; i < arr.Length - 1; i++)
        {
            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[j] < arr[min_idx])
                {
                    min_idx = j;
                }
            }
            // Swap the found minimum element with the first
            long temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }
    //end Selection Sort
    //Insertion Sort
    private static void InsertionSort(long[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            long key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    // End Insertion Sort

    private long ExecutionTime(Action function)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        function();
        stopwatch.Stop();
        return stopwatch.ElapsedMilliseconds;
    }


    private static int SoSanh(string a, string b)
    {
        //return a.ToString().ToLower().CompareTo(b.ToString().ToLower());
        return a.ToString().CompareTo(b.ToString());
    }
}
